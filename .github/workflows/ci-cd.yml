name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build Docker images
        run: docker-compose build

      - name: Run tests
        env:
          OPENWEATHERMAP_API_KEY: ${{ secrets.OPENWEATHERMAP_API_KEY }}
        run: |
          docker-compose run --rm -w /app -e OPENWEATHERMAP_API_KEY=$OPENWEATHERMAP_API_KEY backend sh -c "pip show starlette && pytest tests/ -v"

  publish-and-deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Выполняется только для ветки main
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/weather-service-backend:latest ./backend
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/weather-service-backend:latest

      - name: Build and push bot image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/weather-service-bot:latest ./bot
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/weather-service-bot:latest

      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/weather-service-frontend:latest ./frontend
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/weather-service-frontend:latest

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: Get GKE credentials
        run: gcloud container clusters get-credentials ${{ secrets.GCP_CLUSTER_NAME }} --region ${{ secrets.GCP_REGION }} --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Create Secrets
        run: |
          kubectl apply -f k8s/weather-secrets.yaml

      - name: Deploy to GKE
        run: |
          kubectl apply -f k8s/redis-deployment.yaml
          kubectl apply -f k8s/backend-deployment.yaml
          kubectl apply -f k8s/bot-deployment.yaml
          kubectl apply -f k8s/frontend-deployment.yaml
          kubectl apply -f k8s/prometheus-deployment.yaml
          kubectl apply -f k8s/grafana-deployment.yaml
          kubectl rollout status deployment/redis
          kubectl rollout status deployment/backend
          kubectl rollout status deployment/bot
          kubectl rollout status deployment/frontend
          kubectl rollout status deployment/prometheus
          kubectl rollout status deployment/grafana