import os
import json
import logging
from datetime import datetime
import requests
import redis
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import emoji

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
BACKEND_URL = os.getenv("BACKEND_URL", "http://backend:8000")
REDIS_HOST = os.getenv("REDIS_HOST", "redis")
REDIS_PORT = os.getenv("REDIS_PORT", 6379)

if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN environment variable is not set")
    raise ValueError("TELEGRAM_TOKEN environment variable is not set")

redis_client = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, decode_responses=True)

LOG_KEY = "bot_request_logs"

# –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –Ω–∞ —ç–º–æ–¥–∑–∏
WEATHER_EMOJIS = {
    "Clear": "‚òÄÔ∏è",  # –°–æ–ª–Ω–µ—á–Ω–æ
    "Clouds": "‚òÅÔ∏è",  # –û–±–ª–∞—á–Ω–æ
    "Rain": "üåßÔ∏è",   # –î–æ–∂–¥—å
    "Snow": "‚ùÑÔ∏è",    # –°–Ω–µ–≥
    "Thunderstorm": "‚õàÔ∏è",  # –ì—Ä–æ–∑–∞
    "Mist": "üå´Ô∏è",    # –¢—É–º–∞–Ω
    "Drizzle": "üå¶Ô∏è", # –ú–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞ –ø–æ –∫–æ–¥—É —Å—Ç—Ä–∞–Ω—ã
def get_flag_emoji(country_code: str) -> str:
    if not country_code:
        return ""
    try:
        offset = ord('üá¶') - ord('A')
        emoji_flag = chr(ord(country_code[0]) + offset) + chr(ord(country_code[1]) + offset)
        return emoji_flag
    except Exception:
        return ""

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤ Redis
def log_request_response(user_id, request_data, response_data):
    log_entry = {
        "timestamp": datetime.utcnow().isoformat(),
        "user_id": user_id,
        "request": request_data,
        "response": response_data
    }
    try:
        redis_client.lpush(LOG_KEY, json.dumps(log_entry, ensure_ascii=False))
        redis_client.ltrim(LOG_KEY, 0, 999)
    except redis.RedisError as e:
        logger.error(f"Failed to log request/response to Redis: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    keyboard = [
        [
            InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ–≥–æ–¥—ã", callback_data="search_weather"),
            InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞", callback_data="show_history"),
        ],
        [
            InlineKeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π", callback_data="forecast_7"),
            InlineKeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 14 –¥–Ω–µ–π", callback_data="forecast_14"),
            InlineKeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 30 –¥–Ω–µ–π", callback_data="forecast_30"),
        ],
        [InlineKeyboardButton("–û –±–æ—Ç–µ", callback_data="about_bot")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await update.message.reply_text(message, reply_markup=reply_markup)
    
    log_request_response(user_id, {"command": "/start"}, {"message": message})

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    if query.data == "show_history":
        await show_history(update, context, from_callback=True)
    elif query.data == "about_bot":
        await about_bot(update, context, from_callback=True)
    elif query.data == "search_weather":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Moscow):")
        log_request_response(user_id, {"action": "search_weather"}, {"message": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"})
    elif query.data.startswith("forecast_"):
        period = query.data.split('_')[1]  # –ù–∞–ø—Ä–∏–º–µ—Ä, "7", "14", "30"
        context.user_data['forecast_days'] = int(period)
        await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {period} –¥–Ω–µ–π. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Moscow):")
        log_request_response(user_id, {"action": f"forecast_{period}"}, {"message": f"–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ {period} –¥–Ω–µ–π"})

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /about
async def about_bot(update: Update, context: ContextTypes.DEFAULT_TYPE, from_callback=False):
    user_id = update.effective_user.id
    message = "–Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã:\n- –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –ø–æ –≥–æ—Ä–æ–¥—É\n- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7/14/30 –¥–Ω–µ–π\n- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞\n–°–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ weather_service."
    if from_callback:
        await update.callback_query.message.reply_text(message)
    else:
        await update.message.reply_text(message)
    
    log_request_response(user_id, {"command": "/about"}, {"message": message})

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history
async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE, from_callback=False):
    user_id = update.effective_user.id
    try:
        response = requests.get(f"{BACKEND_URL}/weather_history", params={"limit": 14})
        response.raise_for_status()
        history = response.json().get("history", [])

        if not history:
            message = "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞."
            if from_callback:
                await update.callback_query.message.reply_text(message)
            else:
                await update.message.reply_text(message)
            log_request_response(user_id, {"action": "show_history"}, {"message": message})
            return

        message = "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:\n"
        for entry in history:
            message += f"–ì–æ—Ä–æ–¥: {entry['city']}\n–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {entry['forecast_date']}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {entry['avg_temperature']:.1f}¬∞C\n–û–ø–∏—Å–∞–Ω–∏–µ: {entry['description']}\n–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {entry['request_time']}\n\n"

        if from_callback:
            await update.callback_query.message.reply_text(message)
        else:
            await update.message.reply_text(message)
        
        log_request_response(user_id, {"action": "show_history"}, {"message": message})
    except requests.RequestException as e:
        logger.error(f"Failed to fetch history: {e}")
        message = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞."
        if from_callback:
            await update.callback_query.message.reply_text(message)
        else:
            await update.message.reply_text(message)
        log_request_response(user_id, {"action": "show_history"}, {"message": message, "error": str(e)})

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    city = update.message.text.strip()
    lang = "ru"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ (7/14/30 –¥–Ω–µ–π)
    if 'forecast_days' in context.user_data:
        days = context.user_data['forecast_days']
        try:
            response = requests.get(f"{BACKEND_URL}/forecast/{city}", params={"days": days, "lang": lang})
            response.raise_for_status()
            data = response.json()

            message = f"{emoji.emojize(':calendar:')} –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {days} –¥–Ω–µ–π –¥–ª—è {city}:\n"
            country_code = data.get("country", "")
            flag_emoji = get_flag_emoji(country_code)

            for forecast in data["forecast"]:
                date = forecast.get("date", "N/A")
                temperature = forecast.get("temperature", "N/A")
                description = forecast.get("description", "N/A").capitalize()
                weather_emoji = WEATHER_EMOJIS.get(description, "üåç")

                message += (
                    f"{flag_emoji} {date}: {weather_emoji} {description}, {temperature}¬∞C\n"
                )

            message += f"–î–∞–Ω–Ω—ã–µ {'–∏–∑ –∫—ç—à–∞' if data['fromCache'] else '–æ—Ç OpenWeatherMap'}"
            await update.message.reply_text(message)
            log_request_response(user_id, {"city": city, "days": days, "lang": lang}, {"message": message})

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
            del context.user_data['forecast_days']

        except requests.RequestException as e:
            logger.error(f"Failed to fetch forecast for {city}: {e}")
            message = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            await update.message.reply_text(message)
            log_request_response(user_id, {"city": city, "days": days, "lang": lang}, {"message": message, "error": str(e)})
        return

    # –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ (–ø–æ–∏—Å–∫ –±–µ–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞)
    try:
        response = requests.get(f"{BACKEND_URL}/forecast/{city}", params={"lang": lang})
        response.raise_for_status()
        data = response.json()

        message = f"–ü–æ–≥–æ–¥–∞ –≤ {data['city']}:\n"
        country_code = data.get("country", "")
        flag_emoji = get_flag_emoji(country_code)

        for forecast in data["forecast"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π (1 –¥–µ–Ω—å)
            date = forecast.get("date", "N/A")
            temperature = forecast.get("temperature", "N/A")
            description = forecast.get("description", "N/A").capitalize()
            weather_emoji = WEATHER_EMOJIS.get(description, "üåç")

            message += f"{flag_emoji} {date}: {weather_emoji} {description}, {temperature}¬∞C\n"

        message += f"–î–∞–Ω–Ω—ã–µ {'–∏–∑ –∫—ç—à–∞' if data['fromCache'] else '–æ—Ç OpenWeatherMap'}"
        await update.message.reply_text(message)
        log_request_response(user_id, {"city": city, "lang": lang}, {"message": message})

    except requests.RequestException as e:
        logger.error(f"Failed to fetch weather for {city}: {e}")
        message = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Moscow)."
        await update.message.reply_text(message)
        log_request_response(user_id, {"city": city, "lang": lang}, {"message": message, "error": str(e)})

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("history", show_history))
    application.add_handler(CommandHandler("about", about_bot))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("Starting Telegram bot...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()